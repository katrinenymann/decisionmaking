model {

  #data is nagents, ntrials, index of vals, matrix of contributions (c), and average contribution (Ga)

  for (n in 1:nagents) {

    #Gb1[n] ~ dunif(0,20) #initial beliefs about what others will contribute
    omega1[n] ~ dnorm(0,1)T(0,1) #initial weighting of beliefs about others contributions in choice of own contribution, relative to prefs
    lambda[n] ~ dnorm(0,1)T(0,1) #decay rate in weighting of beliefs about others - prefs dominate over time
    gamma[n] ~ dnorm(0,1)T(0,1) #parameter weighting of beliefs about what others will contribute, relative to observed contribution
    # Linear modeling --> intercept set to 0. If they think others contribute nothing they will also contribute nothing. 
    p0[n] <- 0#~ dunif(0,20) #intercept of linear model relating preferred contributions to possible contribution values
    pbeta[n] ~ dunif(0,1) #slope of linear model relating preferred contributions to possible contribution values
    
    for (i in 1:length(vals)) {
      pvals[n,i] <- p0[n] + (pbeta[n]*vals[i]) #vector of preferred contributions for each possible value - linear relationship
    }
    
    omega[n,1] <- omega1[n] # A uniform is quite naive so therefore this?
    
    #assume beliefs about others on first trial is reflected in first contribution. Simplification for model.
    Gb[n,1] <- c[n,1] 
    
    mu_c[n,1] <- Ga[1]
  }


  for (t in 2:ntrials) {
    
    for (n in 1:nagents) {
    
      Gb[n,t] <- (gamma[n]*(Gb[n,t-1]))+((1-gamma[n])*(Ga[t-1]))
      
      #this line is necessary to avoid zero indexing
      pval_index[n,t] <- ifelse(round(Gb[n,t])>1,round(Gb[n,t]),1)
      
      p[n,t] <- pvals[n,pval_index[n,t]]
      
      omega[n,t] <- omega[n,t-1]*(1-lambda[n])#exp(-lambda[n]) # Lambda as a decay function for the weighting of beleifs about others contributions
      
      # departs from simulation function. Data needs to be stochastic,
      # so we don't simulate c directly, rather mean of c distribution
      mu_c[n,t] <- ((omega[n,t])*Gb[n,t]) + ((1-omega[n,t])*p[n,t]) 
      
      c[n,t] ~ dnorm(mu_c[n,t],.1)
    }
    
  }
}